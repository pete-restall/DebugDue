
# Copyright (C) 2012-2021 R. Diez - see the JtagDue project for licensing information.

# By default, if you change the firmware version number below, the next 'make' invocation
# will rebuild the 'configure' script. This script will have the updated version number
# in the PACKAGE_VERSION variable. All makefiles will automatically get rebuilt,
# but despite this, the sources will not be recompiled.
# I tried the "maintainer mode" (AM_MAINTAINER_MODE), but that did not help.
AC_INIT([JtagDue],[1.1.6])
AC_PREREQ([2.69])  # Anything older may not work properly.

# Place auxiliary files in a subdirectory in order to reduce clutter in the top-level project directory.
AC_CONFIG_AUX_DIR([build-aux])

AC_NO_EXECUTABLES  # This undocumented hack prevents error message "error: C compiler cannot create executables",
                   # see the toolchain makefile for more information about why this is needed. Short version:
                   # libgloss was not adapted for our board, so the toolchain alone cannot build executables.

AM_INIT_AUTOMAKE([-Wall])


if ! test set = "${BASH_VERSION+set}"; then
  # How to test this error path:
  #    CONFIG_SHELL=/bin/sh ./configure
  # The following will not work, as the generated 'configure' script seems to change the shell automatically:
  #   /bin/sh ./configure
  AC_MSG_ERROR([Please run this 'configure' script with Bash, as it uses Bash-only features, and has only been tested against Bash. Start it like this: CONFIG_SHELL=/bin/bash ./configure])
fi


# Use "make V=1" (and remove the '-s' flag) in order to see the GCC command lines during compilation.
m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])


# According to the autoconf documentation, this is about the right place to define compiler flags:
#
#   If your package does not like this default, then it is acceptable to insert the line
#  ': ${CXXFLAGS=""}' after AC_INIT and before AC_PROG_CXX to select an empty default instead.
#
# We are clearing these variables here because they are actually user variables and we want to reserve
# them for the end user, so that he can add his own flags when invoking the generated makefiles.
# Instead, we will be overriding AM_CFLAGS and friends below.
#
# The user will normally not modify important flags, but some of them, like "-fdiagnostics-color=always",
# depend on factors outside of our control and should not be set by this configuration script.

declare -a USER_VARIABLES=(CXXFLAGS CFLAGS CCASFLAGS LDFLAGS)

for varName in "${USER_VARIABLES[[@]]}"  # Note that autoconf needs to escape brackets ('[[' instead of '[').
do                                       # Alternatively, you can use trigraphs @<:@ and @>:@ .
  eval "$varName=\"\""
done

AC_PROG_CC
AC_PROG_CXX
AM_PROG_AS
AC_PROG_INSTALL

AM_EXTRA_RECURSIVE_TARGETS([disassemble])


ABS_SRCDIR="$(readlink --verbose --canonicalize -- "$srcdir")"


# Say you have a shell variable called 'MY_OPTION' with value 'true'.
# This routine will add a '-DMY_OPTION=1' command-line argument to shell variable EXTRA_CPP_FLAGS,
# intended for the C/C++ preprocessor.

PublishBooleanVariableAsCPreprocessorSymbol ()
{
  local VARIABLE_NAME="$1"

  if false; then
    echo "Setting boolean C preprocessor symbol: <${VARIABLE_NAME}>, value: <${!VARIABLE_NAME}>"
  fi

  if [[ -z "${!VARIABLE_NAME+x}" ]]; then
    AC_MSG_ERROR([There is no shell variable named "$1".])
  fi

  if ! [[[ ${!VARIABLE_NAME} = "true" || ${!VARIABLE_NAME} = "false" ]]]; then
    AC_MSG_ERROR([Shell variable "$VARIABLE_NAME" should be boolean but has invalid value "${!VARIABLE_NAME}".])
  fi

  if [[ -z "${EXTRA_CPP_FLAGS+x}" ]]; then
    AC_MSG_ERROR([Shell variable EXTRA_CPP_FLAGS is not defined yet when attempting to add boolean C preprocessor symbol "VARIABLE_NAME".])
  fi

  if ${!VARIABLE_NAME}; then
    EXTRA_CPP_FLAGS+=" -D${VARIABLE_NAME}=1"
  else
    EXTRA_CPP_FLAGS+=" -D${VARIABLE_NAME}=0"
  fi
}


# Say you have a shell variable called 'MY_OPTION' with value 'true'. This M4 macro
# will make 'MY_OPTION' available in configure.ac and in the C/C++ source code.
#
# This is an M4 macro, and not a shell function, because it is hard to call M4 macros
# like AM_SUBST with shell variables as arguments.

AC_DEFUN([PUBLISH_BOOLEAN_VARIABLE],
         [
           if false; then
             echo "Publishing boolean variable: <$1>, value: <$$1>."
           fi

           # We could optimise the checks below away, because SetBooleanCPreprocessorFlag does similar checks,
           # but I would rather keep the checks here, if only for example purposes.
           if [[ -z "${$1+x}" ]]; then
             AC_MSG_ERROR([There is no shell variable named "$1".])
           fi

           if ! [[[ $$1 = "true" || $$1 = "false" ]]]; then
             AC_MSG_ERROR([Shell variable "$1" should be boolean but has invalid value "$$1".])
           fi

           # A boolean variable is normally not used in all of the ways below, but always 'publishing'
           # in all ways makes the configure.ac script simpler an easier to maintain.

           # AM_CONDITIONAL allows you to use the variable in "if VARIABLE" statements inside the Makefile.am file.
           AM_CONDITIONAL([$1],[$$1])

           # AC_SUBST allows you to use the variable in expressions like $(VARIABLE) and @VARIABLE@ inside the Makefile.am file.
           # This is apparently called "configure substitution" in Automake.
           AC_SUBST([$1])

           # Adding -DVARIABLE=0/1 to the compiler flags makes the variable available in the C/C++ source code as a preprocessor symbol.
           PublishBooleanVariableAsCPreprocessorSymbol "$1"
         ]
        )


# ----------- Check GCC version number -----------

if test "x$GCC" != "xyes"; then
  AC_MSG_ERROR([GCC is the only supported compiler at the moment.])
fi

# This code is inspired by macro AX_COMPILER_VERSION, because using that macro means that the user needs
# to install GNU Autoconf Archive beforehand.
# Note that we are assuming here that the C and C++ compilers are the same version.
AC_COMPUTE_INT(gcc_version_major, __GNUC__,, AC_MSG_FAILURE([unknown gcc major]))
AC_COMPUTE_INT(gcc_version_minor, __GNUC_MINOR__,, AC_MSG_FAILURE([unknown gcc minor]))
AC_COMPUTE_INT(gcc_version_patch, __GNUC_PATCHLEVEL__,, AC_MSG_FAILURE([unknown gcc patch level]))
my_compiler_version="$gcc_version_major.$gcc_version_minor.$gcc_version_patch"
echo "Detected compiler: GCC $my_compiler_version"

IS_GCC_7_OR_LATER=false
AS_VERSION_COMPARE( [$my_compiler_version], [7], [], [], [IS_GCC_7_OR_LATER=true] )
IS_GCC_8_OR_LATER=false
AS_VERSION_COMPARE( [$my_compiler_version], [8], [], [], [IS_GCC_8_OR_LATER=true] )


# ----------- Check whether debug or release build -----------

AC_MSG_CHECKING(whether to generate a debug build)
AC_ARG_ENABLE([debug],
              [AS_HELP_STRING([--enable-debug=[[yes/no]]],
                              [generate a debug build with assertions and no optimization [default=no]])],
              [case "${enableval}" in
               yes) debug_build=true ;;
               no)  debug_build=false ;;
               *) AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
               esac],
              debug_build=false)

if [ test x$debug_build = xtrue ]
then
    AC_MSG_RESULT(yes)
    # I had to add "-g" again at this point in order to get line number information generated
    # in the general debug information.
    # We could use GCC 4.8's new optimisation level "-Og", but "-O0" still provides the most comfortable debugging experience.
    # Switch -fmerge-constants helps mainly reduce the code size of all possible assertion failed messages.
    BUILD_FLAGS="-O0 -fmerge-constants -DDEBUG -g3"
    IS_DEBUG_BUILD=true
else
    AC_MSG_RESULT(no)
    # One quick test I did showed these JTAG transfer speeds: with -Os: 25 KB/s
    #                                                         with -O3: 35 KB/s
    # The firmware did get somewhat bigger with -O3 though.
    # It would probably be best to compile with -Os by default and mark some modules or functions for
    # -O3 optimisation with GCC options "#pragma GCC optimize ("string"...)" and "attribute((optimize("STRING")))".
    BUILD_FLAGS="-O3 -DNDEBUG -g3"

    if true; then
      # The GCC toolchain is built with --enable-lto. I hope that makes it build the C runtime library,
      # libstdc++, etc. with -flto. We should probably build newlib with LTO enabled too.

      # GCC's option "-flto=jobserver" only works properly if the make recipe starts with the special character '+',
      # so that GNU Make passes the jobserver file descriptors to the child process.
      #   LTO_PARALLEL_LEVEL="jobserver"
      # Unfortunately, that is not possible with Automake 1.15.1. I asked in the Automake mailing list to no avail:
      #   Subject: Prepending '+' to the recipe line when linking with GCC's -flto=jobserver
      #   URL: https://lists.gnu.org/archive/html/automake/2020-02/msg00012.html
      # As a workaround, I am requesting as many threads as CPU cores + 1. This is not ideal if you are using
      # a top-level jobserver to build several projects like this one in parallel.
      LTO_PARALLEL_LEVEL="$(( $(getconf _NPROCESSORS_ONLN) + 1 ))"

      BUILD_FLAGS+=" -flto=$LTO_PARALLEL_LEVEL"

      # Compilation is faster without "fat LTO objects", and the .o files are also significantly smaller.
      # The following option is not really necessary, because that mode is actually the default in our toolchain,
      # but the option and this comment acts as a reminder, so that I do not have to think about it again.
      # Note that you cannot perform a regular, non-LTO link with non-fat object files.
      BUILD_FLAGS+=" -fno-fat-lto-objects"
    fi

    IS_DEBUG_BUILD=false
fi

BUILD_FLAGS+=" -Wall"


# See UserImplementationOfAssert.h for all possible assertion types.
# For debug builds, the size of the final binary depends on the assertion type.
ASSERT_TYPE=ASSERT_TYPE_FULL


# ----------- Project Name -----------

AC_ARG_WITH(project,
[AS_HELP_STRING([--with-project=project-name],
		[see the --project option in the top-level build script.])])

if test "x$with_project" == x; then
  AC_MSG_ERROR([Please specify the --with-project=project-name configuration switch.])
fi

PROJECT_NAME_LOWERCASE="${with_project,,}"

IS_EMPTY_FIRMWARE=false
IS_QEMU_FIRMWARE=false
IS_JTAG_DUE=false

case "$PROJECT_NAME_LOWERCASE" in
  emptyfirmware) IS_EMPTY_FIRMWARE=true
                 BOARD_SUPPORT_DIR="BoardSupport-ArduinoDue" ;;
  qemufirmware)  IS_QEMU_FIRMWARE=true
                 BOARD_SUPPORT_DIR="BoardSupport-LM3S6965EVB" ;;
  jtagdue)       IS_JTAG_DUE=true
                 BOARD_SUPPORT_DIR="BoardSupport-ArduinoDue" ;;
  *) AC_MSG_ERROR([Invalid project name "$with_project".]) ;;
esac

# BOARD_SUPPORT_DIR must not be an absolute path, or Automake will litter
# that directory with object files.
AC_SUBST(BOARD_SUPPORT_DIR)


# ----------- Path to the Atmel Software Framework -----------

AC_ARG_WITH(atmel-software-framework,
[AS_HELP_STRING([--with-atmel-software-framework=PATH],
		[specify directory for the installed Atmel Software Framework, for example "$HOME/asf-3.14.0.86".])])

if ! $IS_QEMU_FIRMWARE; then

  if test "x$with_atmel_software_framework" == x; then
    AC_MSG_ERROR([Please specify the --with-atmel-software-framework=PATH configuration switch])
  fi

  ASF_BASEDIR="$(readlink --verbose --canonicalize -- "$with_atmel_software_framework")"
  SAM_DIR="$ASF_BASEDIR/sam"

  if ! test -d "$SAM_DIR"; then
    # If the path is completely wrong, 'readlink' can fail. Therefore, we must not use its result in the error message.
    AC_MSG_ERROR([The Atmel Software Framework does not seem to be installed at "$with_atmel_software_framework" (directory "$SAM_DIR" not found).])
  fi

  # Create or update the symbolic link to the ASF.
  # Using a symbolic link is the only way I found that works well with Automake's option 'subdir-objects'.
  # Otherwise, trying to compile files that live out of the source tree will give you strange warnings at the very least.
  # Later note: This might have been fixed in Automake version 1.16.
  ASF_LINK="$srcdir/AsfSrc"
  ln --symbolic --no-dereference --force -- "$ASF_BASEDIR" "$ASF_LINK"

fi


# ----------- target arch -----------

# I have not figured out yet how to get the value passed as --host,
# so I am passing it again in a separate command-line option.

AC_ARG_WITH(target-arch,
[AS_HELP_STRING([--with-target-arch=arch],
		[specify the same architecture as argument -host.])])

if test "x$with_target_arch" == x; then
  AC_MSG_ERROR([Please specify the --with-target-arch=arch configuration switch.])
fi

TARGET_ARCH="$with_target_arch"
AC_SUBST(TARGET_ARCH)


# ----------------------------------------
# Add some extra compilation flags.

ARCH_FLAGS=" -mcpu=cortex-m3 -mthumb"  # Switch "-march=armv7-m" could also be an option.

EXTRA_CPP_FLAGS=""       # Preprocessor flags.
EXTRA_C_FLAGS=""         # C flags.
EXTRA_CXX_FLAGS=""       # C++ flags.
EXTRA_C_AND_CXX_FLAGS="" # Flags for both C and C++.

# WARNING: All flags that affect the ABI must match those specified when building the toolchain.

EXTRA_C_AND_CXX_FLAGS+=" -ffunction-sections -fdata-sections"

# I am not sure whether specifying our own --param max-inline-insns-single is a good idea,
# but that's what the Arduino Framework does:
EXTRA_C_AND_CXX_FLAGS+=" --param max-inline-insns-single=500"


EXTRA_CPP_FLAGS+=" -DBOARD=ARDUINO_DUE_X"

EXTRA_CPP_FLAGS+=" -D_GNU_SOURCE"  # This select the right version of strerror_r().

# Needed for both CMSIS and the lib under "arduino-1.5.2/hardware/arduino/sam/cores".
EXTRA_CPP_FLAGS+=" -D__SAM3X8E__"

# Needed by the Atmel Software Framework.
EXTRA_CPP_FLAGS+=" -DSAM3XA_SERIES"

EXTRA_CPP_FLAGS+=" -DINCLUDE_USER_IMPLEMENTATION_OF_ASSERT"
EXTRA_CPP_FLAGS+=" -DASSERT_TYPE=$ASSERT_TYPE"

# Needed by NewlibSyscalls.cpp.
EXTRA_CPP_FLAGS+=" -DASSERT_MSG_BUFSIZE=300"

# Needed by the Atmel Software Framework library.
EXTRA_CPP_FLAGS+=" -DCPU_CLOCK=84000000"

# I had problems building some files in the Atmel Software Framework version 3.7.3.69
# when I defined this flag:
#   EXTRA_CPP_FLAGS+=" -DUDD_NO_SLEEP_MGR"

# USB Vendor and Device ID definitions for the 'native' USB port.
#
# The standard Arduino firmware uses ID 0x003e in a composite device
# configuration, which means that the Windows .INF driver uses the following string:
#   USB\VID_2341&PID_003E&MI_00
# Note the "MI_00" at the end that denotes the interface number on the composite device.
#
# Linux needs no drivers, all CDC interfaces are automatically recognised.
# I have heard that composite devices are not supported on Mac OS, but I don't really know.
#
# The JtagDue Firmware does not use a composite device, but defines a single CDC device,
# so that the standard Arduino Due INF driver does not work even if you use the same PID.
#
# Therefore, I have chosen a different PID of 0x1234. You can choose your own,
# but then you will need to modify the .INF driver file and reinstall it on Windows.

EXTRA_CPP_FLAGS+=" -DUSB_VID=0x2341 -DUSB_PID=0x1234"


# Assorted extra warnings.

EXTRA_C_AND_CXX_FLAGS+=" -Wundef"  # It is a very common error to forget defining a symbol, and then "#if SYMBOL" will not fail or warn you,
                                   # because such undefined identifiers are quietly replaced with zero.
                                   # This warning tries to help prevent such mistakes.
                                   # -Wundef is not enabled automatically by -Wall, at least with GCC 9.3.

EXTRA_C_AND_CXX_FLAGS+=" -fdiagnostics-show-option"
EXTRA_C_AND_CXX_FLAGS+=" -Wall -Wextra"
EXTRA_C_AND_CXX_FLAGS+=" -Wshadow -Wpointer-arith -Wcast-qual"
EXTRA_C_AND_CXX_FLAGS+=" -Wunreachable-code"
EXTRA_C_AND_CXX_FLAGS+=" -Wredundant-decls"
EXTRA_C_AND_CXX_FLAGS+=" -Wwrite-strings"
EXTRA_C_AND_CXX_FLAGS+=" -Wfloat-equal"
EXTRA_C_AND_CXX_FLAGS+=" -Wformat=2"
EXTRA_C_AND_CXX_FLAGS+=" -Wunknown-pragmas"
EXTRA_C_AND_CXX_FLAGS+=" -Wattributes"
EXTRA_C_AND_CXX_FLAGS+=" -Wtrampolines"
EXTRA_C_AND_CXX_FLAGS+=" -Wnormalized=nfc"
EXTRA_C_AND_CXX_FLAGS+=" -Wpragmas"
EXTRA_C_AND_CXX_FLAGS+=" -Wlogical-op"
EXTRA_C_AND_CXX_FLAGS+=" -Wunsafe-loop-optimizations"
EXTRA_C_AND_CXX_FLAGS+=" -Wstack-protector"
EXTRA_C_AND_CXX_FLAGS+=" -Wbuiltin-macro-redefined"
# EXTRA_C_AND_CXX_FLAGS+=" -Wmudflap"  # Not available from GCC version 4.9.
EXTRA_C_AND_CXX_FLAGS+=" -Wcpp"
EXTRA_C_AND_CXX_FLAGS+=" -Wendif-labels"
EXTRA_C_AND_CXX_FLAGS+=" -Wdeprecated"
EXTRA_C_AND_CXX_FLAGS+=" -Wdeprecated-declarations"
EXTRA_C_AND_CXX_FLAGS+=" -Wdiv-by-zero"
EXTRA_C_AND_CXX_FLAGS+=" -Wdouble-promotion"

if $IS_GCC_7_OR_LATER; then
  # This warning is new in GCC 7. Atmel's ASF library versions 3.34.2.53 and the latest 3.40.0 generate many of these.
  EXTRA_C_AND_CXX_FLAGS+=" -Wno-expansion-to-defined"
fi

if $IS_GCC_8_OR_LATER; then
  :
else
  EXTRA_C_AND_CXX_FLAGS+=" -Wabi"  # Avoid too many warnings with GCC 7.3.
fi

EXTRA_C_FLAGS+=" -Wc++-compat"
EXTRA_C_FLAGS+=" -Wstrict-prototypes"
EXTRA_C_FLAGS+=" -Wmissing-prototypes"
EXTRA_C_FLAGS+=" -Wpointer-to-int-cast"

EXTRA_C_FLAGS+=" -std=gnu11"

if $IS_GCC_8_OR_LATER; then
  EXTRA_CXX_FLAGS+=" -std=gnu++17"
  # Disable warning "ISO C++17 does not allow 'register' storage class specifier",
  # which appears often in CMSIS source files.
  EXTRA_CXX_FLAGS+=" -Wno-register"
else
  # With -std=c++11 you do not get vsnprintf.
  EXTRA_CXX_FLAGS+=" -std=gnu++14"
fi

# Turn off warnings that occur too often in the libraries.
EXTRA_C_AND_CXX_FLAGS+=" -Wno-missing-field-initializers"

# You may want to disable this warning with certain versions of GCC:
if false; then
  EXTRA_C_AND_CXX_FLAGS+=" -Wno-psabi"  # Suppresses warning "the mangling of 'va_list' has changed in GCC 4.4".
                                        # I do not know yet if this warning should be taken seriously.
fi

# This GCC option apparently does not work with LTO, at least with GCC 4.9.3:
#   #pragma GCC diagnostic ignored "-Wframe-larger-than="
# Therefore, enable this warning only in Debug-Builds:
if $IS_DEBUG_BUILD; then
  EXTRA_C_AND_CXX_FLAGS+=" -Wframe-larger-than=400"  # This limit of 400 bytes is rather arbitrary. But it helps.
  # Option -Wstack-usage is better, as it considers things like alloca() and variable-length arrays.
  # However, you then get the occasional warning "stack usage computation not supported for this target",
  # at least when using inline assembly.
fi

PUBLISH_BOOLEAN_VARIABLE(IS_EMPTY_FIRMWARE)
PUBLISH_BOOLEAN_VARIABLE(IS_QEMU_FIRMWARE)
PUBLISH_BOOLEAN_VARIABLE(IS_JTAG_DUE)

USE_GOLD_LINKER=false
PUBLISH_BOOLEAN_VARIABLE(USE_GOLD_LINKER)


# --- Set the final variables.

AM_CPPFLAGS=" $EXTRA_CPP_FLAGS"
AM_CFLAGS=" $BUILD_FLAGS $ARCH_FLAGS $EXTRA_C_AND_CXX_FLAGS $EXTRA_C_FLAGS"
AM_CXXFLAGS=" $BUILD_FLAGS $ARCH_FLAGS $EXTRA_C_AND_CXX_FLAGS $EXTRA_CXX_FLAGS"
AM_CCASFLAGS=" $BUILD_FLAGS $ARCH_FLAGS"

AC_SUBST(AM_CPPFLAGS)
AC_SUBST(AM_CFLAGS)
AC_SUBST(AM_CXXFLAGS)
AC_SUBST(AM_CCASFLAGS)

# ----------------------------------------

BARE_METAL_SUPPORT_DIR="$ABS_SRCDIR/BareMetalSupport"
AC_SUBST(BARE_METAL_SUPPORT_DIR)

# If you update this line, please update SUBDIRS in Makefile.am too.
#
# I have not found a way to pass a variable to AC_CONFIG_FILES, as AC_CONFIG_FILES simply will not expand a shell variable.
# Therefore, all possible makefiles are listed here, even if not all of them are compiled later (see Makefile.am).
# As a potential work-around, autogen.sh could generate an .m4 file with the right (shorter) list, which would then be included here.
AC_CONFIG_FILES(
  Makefile
)

AC_OUTPUT


# Optionally show the Autotools versions this script is using.

SHOW_TOOL_VERSIONS=false

if $SHOW_TOOLS_VERSIONS; then

  echo "Tool versions:"

  TMP_TXT="$(make --version)"
  head -n 1 - <<<"- $TMP_TXT"

  TMP_TXT="$(autoconf --version)"
  head -n 1 - <<<"- $TMP_TXT"

  TMP_TXT="$(automake --version)"
  head -n 1 - <<<"- $TMP_TXT"

  # We could also show the libtool version here, but we are not using it at all,
  # so it may not even be installed.
fi


# Check that we did actually leave user variables to the end user.
for varName in "${USER_VARIABLES[[@]]}"; do
  if [[ ! -z "${!varName}" ]]; then
    AC_MSG_ERROR([Variable $varName should be undefined or empty, because it is reserved for the end user. However, $varName has the following value: ${!varName}])
  fi
done
