
# ---- Reset configuration ----

# - The Arduino Due provides just a SRST signal (called JTAG_RESET / MASTER-RESET), so the right setting is then 'srst_only'.
# - I have tested empirically that no JTAG communication can take place while the JTAG_SRST signal is asserted.
#   However, I do not think that JTAG_SRST just gates the JTAG clock, I think the whole JTAG logic is reset.
#   Can somebody confirm this? In the mean time, I am using setting 'srst_pulls_trst'.
# - The SRST signal has a 100 K pull-up resistor, so the right JTAG adapter driver setting is then 'srst_open_drain'.
# - I could not test options 'connect_assert_srst' and 'connect_deassert_srst'. Although they are documented,
#   OpenOCD version 0.7.0 refused to accept them. That may have changed with version 0.8.0 though.
reset_config  srst_only  srst_pulls_trst  srst_open_drain

# I do not really know whether 'srst', 'sysresetreq' or 'vectreset' should be used here.
cortex_m  reset_config  sysresetreq

# The JTAG_RESET signal is connected to the NRSTB pin, and the AT91SAM3X8E datasheet states for that pin
# a maximum "Filtered Pulse Width" (Tf) of 1 us and a minimum "Unfiltered Pulse Width" (Tuf) of 100 us.
# The reset signal is also connected to a 10 nF capacitor on the Arduino Due, to the ATmega16U2 microcontroller
# over a 10K resistor, and to some external connector pins.
# Alas, I don't know yet how to translate the values above into a value here.
# The default is 0, and the documentation does not state how long OpenOCD waits, so that it could change
# depending on the PC speed. 1 ms seems a good value.
adapter_nsrst_assert_width 1

# The documented default of 100 ms delay after deasserting SRST is too long.
# With one JtagDue board running the optimised JtagDue firmware in order to debug another Arduino Due board,
# I have seen that 1 ms is too short, you then get JTAG-DP OVERRUN errors in OpenOCD's log. You need some delay
# so that the CPU can reach the initial short busy-loop delay after the clock is set to 84 MHz,
# where the JTAG connection always succeeds and it can stop the firmware at a very early stage.
# 10 ms is too long for the non-optimised JtagDue firmware, the firmware has time to complete the delay busy-loop
# and goes further. 5 ms seems to work well.
#   adapter_nsrst_assert_width  milliseconds
adapter_nsrst_delay 5

proc arduino_due_reset_and_halt { } {
  # This function tries so stop the CPU as soon as possible after the reset. Notes kept:
  # - With reset_config option 'separate', the standard "reset halt" command does not manage to stop the CPU,
  #   at least with OpenOCD version 0.7.0. However, if you use separate 'reset' and 'halt' commands, it works fine,
  #   although the CPU stops later on.
  # - With reset_config option 'srst_pulls_trst' above, command "reset halt" is illegal.
  reset run

  # This 'sleep' makes OpenOCD somehow print the message "target halted due to debug-request, current mode: Thread"
  # afterwards, and also seems to make GDB hang less when the user types 'stepi' afterwards. Without the 'sleep' below,
  # the 'halt' command sometimes seems to get skipped. Note that this delay adds to the adapter_nsrst_delay above.
  sleep 1

  halt
}


# ---- GDB attach configuration ----

proc my_gdb_attach_proc { } {
  echo "GDB attached to OpenOCD, halting the CPU..."
  halt
}

sam3.cpu configure -event gdb-attach my_gdb_attach_proc
