
# ---- Reset configuration ----

# - The Arduino Due provides just a SRST signal (called JTAG_RESET / MASTER-RESET), so the right setting is 'srst_only'.
#
# - I have tested empirically that no JTAG communication can take place while the JTAG_SRST signal is asserted.
#   This is why we need setting 'srst_gates_jtag' and 'connect_deassert_srst'.
#
#   This is unfortunate. It is the reason why the firmware makes a pause on start-up, so that OpenOCD
#   can connect before the firmware goes too far.
#   Some chips, like STM32 and STR9, handle reset better, so they can use settings
#   'srst_nogate' and 'connect_assert_srst' instead.
#
#   However, I do not think that JTAG_SRST just gates the JTAG clock, I think that the whole JTAG logic is reset.
#   That is why we need 'srst_pulls_trst'. Without this option, OpenOCD v0.10.0 and v0.11.0 prints extra errors like:
#     Error: Invalid ACK (7) in DAP response
#   Afterwards, the connection does not work well with OpenOCD v0.10.0. However, OpenOCD v0.11.0
#   seems more robust and the connection still works.
#
# - The SRST signal has a 100 K pull-up resistor, so the right JTAG adapter driver setting is then 'srst_open_drain'.
#   Otherwise, if the debug adapter actively holds SRST high most of the time, the ATmega16U2 AVR microcontroller
#   may no longer be able to trigger a reset when you connect to the 'Programming' USB serial port.
#
# - The default configuration is "reset_config  none  separate". With that configuration, OpenOCD connects
#   to the microcontroller without any errors or warnings. The trouble is, it does not reset the
#   microcontroller's peripherals upon connecting. As a result, if the firmware has run before, the USB peripheral
#   will not work correctly anymore, so the "native USB port" will keep retring to connect,
#   and the heartbeat LED will not blink. That is, the firmware will not operate correctly.
#
# - With OpenOCD v0.10.0, if you stop the firmware with GDB and then restart debugging, you get these messages:
#     GDB attached to OpenOCD, halting the CPU...
#     undefined debug reason 7 - target needs reset
#   Afterwards, the connection appears to work well.
#
# - With OpenOCD v0.11.0, you get the following errors consistently, whether the firmware was stopped or not:
#     Error: Debug regions are unpowered, an unexpected reset might have happened
#     Error: JTAG-DP STICKY ERROR
#     Error: Could not find MEM-AP to control the core
#   However, debugging seems fine afterwards.

reset_config  srst_only  srst_pulls_trst  srst_gates_jtag  srst_open_drain  connect_deassert_srst


# We do have a system reset line. 'vectreset' is not supported on Cortex-M0, M0+ and M1,
# and would not reset the peripherals. We could do that manually, but that would be more work,
# and it is not certain that you can achieve a reset reliably that way.
cortex_m  reset_config  sysresetreq

# The JTAG_RESET signal is connected to the NRSTB pin, and the AT91SAM3X8E datasheet states for that pin
# a maximum "Filtered Pulse Width" (Tf) of 1 us and a minimum "Unfiltered Pulse Width" (Tuf) of 100 us.
# The reset signal is also connected to a 10 nF capacitor on the Arduino Due, to the ATmega16U2 microcontroller
# over a 10K resistor, and to some external connector pins.
# Alas, I don't know yet how to translate the values above into a value here.
# The default is 0, and the documentation does not state how long OpenOCD waits, so that it could change
# depending on the PC speed. 1 ms seems a good value.
adapter_nsrst_assert_width 1

# The documented default of 100 ms delay after deasserting SRST is too long.
# With one Arduino Due board running the optimised DebugDue firmware in order to debug another Arduino Due board,
# I have seen that 1 ms is too short, you then get JTAG-DP OVERRUN errors in OpenOCD's log. You need some delay
# so that the CPU can reach the initial short busy-loop delay after the clock is set to 84 MHz,
# where the JTAG connection always succeeds and it can stop the firmware at a very early stage.
# 10 ms is too long for the non-optimised DebugDue firmware, the firmware has time to complete the delay busy-loop
# and goes further. 5 ms seems to work well.
#   adapter_nsrst_assert_width  milliseconds
adapter_nsrst_delay 5

proc arduino_due_reset_and_halt { } {
  # This function tries to stop the CPU as soon as possible after the reset.
  # OpenOCD has a similar function called "soft_reset_halt". The description is:
  #
  #   "Requesting target halt and executing a soft reset. This is often used when a target
  #    cannot be reset and halted. The target, after reset is released begins to execute code.
  #    OpenOCD attempts to stop the CPU and then sets the program counter back to the
  #    reset vector. Unfortunately the code that was executed may have left the hardware
  #    in an unknown state."
  #
  # The problem with that routine is that, by resetting the program counter, it hides the fact
  # that OpenOCD could not actually stop the CPU at the beginning. Hiding this from the developer
  # is a bad idea in my opinion. That is why I am implementing a similar routine here,
  # but without resetting the program counter, so that the developer always sees that the
  # firmware has run a little before halting.
  #
  reset run

  # This 'sleep' makes OpenOCD somehow print the message "target halted due to debug-request, current mode: Thread"
  # afterwards, and also seems to make GDB hang less when the user types 'stepi' afterwards. Without the 'sleep' below,
  # the 'halt' command sometimes seems to get skipped. Note that this delay adds to the adapter_nsrst_delay above.
  # Note also that this is not sleep() from Jim Tcl, but from OpenOCD, and the duration is in milliseconds.
  sleep 1

  halt
}


# ---- GDB attach configuration ----

proc my_gdb_attach_proc { } {
  echo "GDB attached to OpenOCD, halting the CPU..."
  halt
}

sam3.cpu configure -event gdb-attach my_gdb_attach_proc
